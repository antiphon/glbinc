// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// glbin_lcd_cpp
List glbin_lcd_cpp(NumericMatrix X, NumericVector y, NumericVector offset, int G0, IntegerVector G1, NumericVector group_weight, NumericVector lambda, bool add_intercept, double alpha, int verb, double eps, int dfmax, int maxiter, int AIC_stop);
RcppExport SEXP glbinc_glbin_lcd_cpp(SEXP XSEXP, SEXP ySEXP, SEXP offsetSEXP, SEXP G0SEXP, SEXP G1SEXP, SEXP group_weightSEXP, SEXP lambdaSEXP, SEXP add_interceptSEXP, SEXP alphaSEXP, SEXP verbSEXP, SEXP epsSEXP, SEXP dfmaxSEXP, SEXP maxiterSEXP, SEXP AIC_stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int >::type G0(G0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type G1(G1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type add_intercept(add_interceptSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type verb(verbSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type dfmax(dfmaxSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type AIC_stop(AIC_stopSEXP);
    __result = Rcpp::wrap(glbin_lcd_cpp(X, y, offset, G0, G1, group_weight, lambda, add_intercept, alpha, verb, eps, dfmax, maxiter, AIC_stop));
    return __result;
END_RCPP
}
// glbin_lcd_sparse_cpp
List glbin_lcd_sparse_cpp(SEXP X, NumericVector y, NumericVector offset, NumericVector center, NumericVector scale, int G0, IntegerVector G1, NumericVector group_weight, NumericVector lambda, bool add_intercept, double alpha, int verb, double eps, int dfmax, int maxiter, int AIC_stop);
RcppExport SEXP glbinc_glbin_lcd_sparse_cpp(SEXP XSEXP, SEXP ySEXP, SEXP offsetSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP G0SEXP, SEXP G1SEXP, SEXP group_weightSEXP, SEXP lambdaSEXP, SEXP add_interceptSEXP, SEXP alphaSEXP, SEXP verbSEXP, SEXP epsSEXP, SEXP dfmaxSEXP, SEXP maxiterSEXP, SEXP AIC_stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type center(centerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int >::type G0(G0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type G1(G1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type add_intercept(add_interceptSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type verb(verbSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type dfmax(dfmaxSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type AIC_stop(AIC_stopSEXP);
    __result = Rcpp::wrap(glbin_lcd_sparse_cpp(X, y, offset, center, scale, G0, G1, group_weight, lambda, add_intercept, alpha, verb, eps, dfmax, maxiter, AIC_stop));
    return __result;
END_RCPP
}
// glbin_lcd_std_cpp
List glbin_lcd_std_cpp(NumericMatrix X, NumericVector y, NumericVector offset, int G0, IntegerVector G1, NumericVector group_weight, NumericVector lambda, bool add_intercept, double alpha, int verb, double eps, int dfmax, int maxiter, int AIC_stop);
RcppExport SEXP glbinc_glbin_lcd_std_cpp(SEXP XSEXP, SEXP ySEXP, SEXP offsetSEXP, SEXP G0SEXP, SEXP G1SEXP, SEXP group_weightSEXP, SEXP lambdaSEXP, SEXP add_interceptSEXP, SEXP alphaSEXP, SEXP verbSEXP, SEXP epsSEXP, SEXP dfmaxSEXP, SEXP maxiterSEXP, SEXP AIC_stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int >::type G0(G0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type G1(G1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type group_weight(group_weightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type add_intercept(add_interceptSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type verb(verbSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type dfmax(dfmaxSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type AIC_stop(AIC_stopSEXP);
    __result = Rcpp::wrap(glbin_lcd_std_cpp(X, y, offset, G0, G1, group_weight, lambda, add_intercept, alpha, verb, eps, dfmax, maxiter, AIC_stop));
    return __result;
END_RCPP
}
// glm_binom_std_c
List glm_binom_std_c(NumericMatrix X, NumericVector y, NumericVector offset, NumericVector center, NumericVector scale, bool add_intercept, int verb, double eps, int maxiter, double w_limit, double stability_threshold);
RcppExport SEXP glbinc_glm_binom_std_c(SEXP XSEXP, SEXP ySEXP, SEXP offsetSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP add_interceptSEXP, SEXP verbSEXP, SEXP epsSEXP, SEXP maxiterSEXP, SEXP w_limitSEXP, SEXP stability_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type center(centerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type add_intercept(add_interceptSEXP);
    Rcpp::traits::input_parameter< int >::type verb(verbSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type w_limit(w_limitSEXP);
    Rcpp::traits::input_parameter< double >::type stability_threshold(stability_thresholdSEXP);
    __result = Rcpp::wrap(glm_binom_std_c(X, y, offset, center, scale, add_intercept, verb, eps, maxiter, w_limit, stability_threshold));
    return __result;
END_RCPP
}
// glm_binom_std_sparse_c
List glm_binom_std_sparse_c(SEXP X, NumericVector y, NumericVector offset, NumericVector center, NumericVector scale, bool add_intercept, int verb, double eps, int maxiter, double w_limit, double stability_threshold);
RcppExport SEXP glbinc_glm_binom_std_sparse_c(SEXP XSEXP, SEXP ySEXP, SEXP offsetSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP add_interceptSEXP, SEXP verbSEXP, SEXP epsSEXP, SEXP maxiterSEXP, SEXP w_limitSEXP, SEXP stability_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type center(centerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type add_intercept(add_interceptSEXP);
    Rcpp::traits::input_parameter< int >::type verb(verbSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type w_limit(w_limitSEXP);
    Rcpp::traits::input_parameter< double >::type stability_threshold(stability_thresholdSEXP);
    __result = Rcpp::wrap(glm_binom_std_sparse_c(X, y, offset, center, scale, add_intercept, verb, eps, maxiter, w_limit, stability_threshold));
    return __result;
END_RCPP
}
// rcpp_hello
List rcpp_hello();
RcppExport SEXP glbinc_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(rcpp_hello());
    return __result;
END_RCPP
}
// sparse_c
NumericMatrix sparse_c(SEXP x);
RcppExport SEXP glbinc_sparse_c(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    __result = Rcpp::wrap(sparse_c(x));
    return __result;
END_RCPP
}
